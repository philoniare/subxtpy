{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SubxtPy Documentation","text":"<p>Welcome to the SubxtPy documentation. SubxtPy is a Python library for interacting with Substrate-based blockchains using the <code>subxt</code> Rust library via <code>pyo3</code>. It provides asynchronous methods to interact with the blockchain, including fetching storage entries, constants, events, making runtime API calls, and submitting transactions.</p>"},{"location":"#contents","title":"Contents","text":"<ul> <li>Keypair</li> <li>SubxtClient</li> <li>BlockSubscription</li> <li>StorageIterator</li> </ul>"},{"location":"blocksubscription/","title":"BlockSubscription","text":"<p>A subscription to new blocks on the blockchain.</p> <p>This class provides an asynchronous iterator over new blocks as they are finalized.</p>"},{"location":"blocksubscription/#example-usage","title":"Example Usage","text":"<pre><code>import asyncio\nfrom subxtpy import SubxtClient\n\nasync def main():\n    client = await SubxtClient.new()\n    subscription = await client.subscribe_new_blocks()\n    async for block in subscription:\n        print(f\"Block Number: {block['block_number']}\")\n        print(f\"Block Hash: {block['block_hash']}\")\n        print(\"Extrinsics:\")\n        for extrinsic in block['extrinsics']:\n            print(extrinsic)\n\nasyncio.run(main())\n</code></pre>"},{"location":"blocksubscription/#methods","title":"Methods","text":""},{"location":"blocksubscription/#__aiter__","title":"<code>__aiter__()</code>","text":"<p>Return the asynchronous iterator object.</p> <p>Usage:</p> <pre><code>async for block in subscription:\n    # process block\n</code></pre>"},{"location":"blocksubscription/#__anext__-dict","title":"<code>__anext__() -&gt; dict</code>","text":"<p>Return the next block from the subscription.</p> <p>Yields:</p> <ul> <li><code>dict</code>: A dictionary containing the block number, block hash, and a list of extrinsics.</li> </ul> <p>Raises:</p> <ul> <li><code>StopAsyncIteration</code>: When no more blocks are available.</li> </ul>"},{"location":"keypair/","title":"Keypair","text":"<p>A <code>Keypair</code> used for signing transactions.</p> <p>This class wraps an <code>sr25519</code> keypair and provides methods to create a keypair from a secret key.</p>"},{"location":"keypair/#methods","title":"Methods","text":""},{"location":"keypair/#from_secret_keysecret_key-str-keypair","title":"<code>from_secret_key(secret_key: str) -&gt; Keypair</code>","text":"<p>Create a new <code>Keypair</code> from a secret key in hexadecimal format.</p> <p>Parameters:</p> <ul> <li><code>secret_key</code> (str): A 64-character hexadecimal string representing the secret key.</li> </ul> <p>Returns:</p> <ul> <li><code>Keypair</code>: A new <code>Keypair</code> instance.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code>: If the secret key is not 64 hex characters long or invalid.</li> </ul> <p>Example:</p> <pre><code>from subxtpy import Keypair\n\nsecret_key = \"your_64_character_hex_secret_key\"\nkeypair = Keypair.from_secret_key(secret_key)\n</code></pre>"},{"location":"storageiterator/","title":"StorageIterator","text":"<p>An asynchronous iterator over storage key-value pairs.</p> <p>This class allows you to iterate over storage entries retrieved from the blockchain.</p>"},{"location":"storageiterator/#example-usage","title":"Example Usage","text":"<pre><code>import asyncio\nfrom subxtpy import SubxtClient\n\nasync def main():\n    client = await SubxtClient.new()\n    iterator = await client.storage_iter(\"System\", \"Account\", b\"\")\n    async for item in iterator:\n        print(f\"Key Bytes: {item['key_bytes']}\")\n        print(f\"Keys: {item['keys']}\")\n        print(f\"Value: {item['value']}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"storageiterator/#methods","title":"Methods","text":""},{"location":"storageiterator/#__aiter__","title":"<code>__aiter__()</code>","text":"<p>Return the asynchronous iterator object.</p> <p>Usage:</p> <pre><code>async for item in iterator:\n    # process item\n</code></pre>"},{"location":"storageiterator/#__anext__-dict","title":"<code>__anext__() -&gt; dict</code>","text":"<p>Return the next storage key-value pair from the iterator.</p> <p>Yields:</p> <ul> <li><code>dict</code>: A dictionary containing the key bytes, keys, and value.</li> </ul> <p>Raises:</p> <ul> <li><code>StopAsyncIteration</code>: When no more items are available.</li> </ul>"},{"location":"subxtclient/","title":"SubxtClient","text":"<p>A client for interacting with a Substrate-based blockchain.</p> <p>This class provides methods to interact with the blockchain, including fetching storage entries, constants, events, making runtime API calls, and submitting transactions.</p>"},{"location":"subxtclient/#class-methods","title":"Class Methods","text":""},{"location":"subxtclient/#subxtclientnew-subxtclient","title":"<code>SubxtClient.new() -&gt; SubxtClient</code>","text":"<p>Create a new <code>SubxtClient</code> instance asynchronously.</p> <p>Returns:</p> <ul> <li><code>SubxtClient</code>: A new client connected to the default network.</li> </ul> <p>Raises:</p> <ul> <li><code>RuntimeError</code>: If the client fails to connect.</li> </ul> <p>Example:</p> <pre><code>import asyncio\nfrom subxtpy import SubxtClient\n\nasync def main():\n    client = await SubxtClient.new()\n    # Use the client for further operations\n\nasyncio.run(main())\n</code></pre>"},{"location":"subxtclient/#instance-methods","title":"Instance Methods","text":""},{"location":"subxtclient/#storagepallet_name-str-entry_name-str-key-list-any","title":"<code>storage(pallet_name: str, entry_name: str, key: list) -&gt; Any</code>","text":"<p>Fetch a storage entry from the blockchain asynchronously.</p> <p>Parameters:</p> <ul> <li><code>pallet_name</code> (str): The name of the pallet.</li> <li><code>entry_name</code> (str): The name of the storage entry.</li> <li><code>key</code> (list): A list of keys for the storage entry.</li> </ul> <p>Returns:</p> <ul> <li><code>Any</code>: The value of the storage entry.</li> </ul> <p>Raises:</p> <ul> <li><code>RuntimeError</code>: If fetching the storage entry fails.</li> <li><code>ValueError</code>: If the storage entry is not found.</li> </ul> <p>Example:</p> <pre><code>import asyncio\nfrom subxtpy import SubxtClient\n\nasync def main():\n    client = await SubxtClient.new()\n    balance = await client.storage(\"Balances\", \"FreeBalance\", [account_id])\n    print(f\"Balance: {balance}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"subxtclient/#constantpallet_name-str-constant_name-str-any","title":"<code>constant(pallet_name: str, constant_name: str) -&gt; Any</code>","text":"<p>Fetch a constant value from the blockchain asynchronously.</p> <p>Parameters:</p> <ul> <li><code>pallet_name</code> (str): The name of the pallet.</li> <li><code>constant_name</code> (str): The name of the constant.</li> </ul> <p>Returns:</p> <ul> <li><code>Any</code>: The value of the constant.</li> </ul> <p>Raises:</p> <ul> <li><code>RuntimeError</code>: If fetching the constant fails.</li> </ul> <p>Example:</p> <pre><code>import asyncio\nfrom subxtpy import SubxtClient\n\nasync def main():\n    client = await SubxtClient.new()\n    existential_deposit = await client.constant(\"Balances\", \"ExistentialDeposit\")\n    print(f\"Existential Deposit: {existential_deposit}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"subxtclient/#events-list","title":"<code>events() -&gt; list</code>","text":"<p>Fetch events from the blockchain asynchronously.</p> <p>Returns:</p> <ul> <li><code>list</code>: A list of events, where each event is a dictionary containing pallet, variant, and fields.</li> </ul> <p>Raises:</p> <ul> <li><code>RuntimeError</code>: If fetching events fails.</li> </ul> <p>Example:</p> <pre><code>import asyncio\nfrom subxtpy import SubxtClient\n\nasync def main():\n    client = await SubxtClient.new()\n    events = await client.events()\n    for event in events:\n        print(event)\n\nasyncio.run(main())\n</code></pre>"},{"location":"subxtclient/#runtime_api_callpallet_name-str-entry_name-str-key-list-any","title":"<code>runtime_api_call(pallet_name: str, entry_name: str, key: list) -&gt; Any</code>","text":"<p>Perform a runtime API call to the blockchain asynchronously.</p> <p>Parameters:</p> <ul> <li><code>pallet_name</code> (str): The name of the pallet.</li> <li><code>entry_name</code> (str): The name of the runtime API function.</li> <li><code>key</code> (list): A list of arguments for the runtime API call.</li> </ul> <p>Returns:</p> <ul> <li><code>Any</code>: The result of the runtime API call.</li> </ul> <p>Raises:</p> <ul> <li><code>RuntimeError</code>: If the runtime API call fails.</li> </ul> <p>Example:</p> <pre><code>import asyncio\nfrom subxtpy import SubxtClient\n\nasync def main():\n    client = await SubxtClient.new()\n    result = await client.runtime_api_call(\"SomePallet\", \"someFunction\", [arg1, arg2])\n    print(f\"Result: {result}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"subxtclient/#storage_iterpallet_name-str-entry_name-str-key-bytes-storageiterator","title":"<code>storage_iter(pallet_name: str, entry_name: str, key: bytes) -&gt; StorageIterator</code>","text":"<p>Iterate over storage entries from the blockchain asynchronously.</p> <p>Parameters:</p> <ul> <li><code>pallet_name</code> (str): The name of the pallet.</li> <li><code>entry_name</code> (str): The name of the storage entry.</li> <li><code>key</code> (bytes): The prefix key for iteration.</li> </ul> <p>Returns:</p> <ul> <li><code>StorageIterator</code>: An asynchronous iterator over storage key-value pairs.</li> </ul> <p>Raises:</p> <ul> <li><code>RuntimeError</code>: If the iteration fails.</li> </ul> <p>Example:</p> <pre><code>import asyncio\nfrom subxtpy import SubxtClient\n\nasync def main():\n    client = await SubxtClient.new()\n    iterator = await client.storage_iter(\"System\", \"Account\", b\"\")\n    async for item in iterator:\n        print(item)\n\nasyncio.run(main())\n</code></pre>"},{"location":"subxtclient/#sign_and_submitfrom-keypair-pallet_name-str-entry_name-str-payload-list-str","title":"<code>sign_and_submit(from: Keypair, pallet_name: str, entry_name: str, payload: list) -&gt; str</code>","text":"<p>Sign and submit a transaction to the blockchain asynchronously.</p> <p>Parameters:</p> <ul> <li><code>from</code> (Keypair): The keypair to sign the transaction.</li> <li><code>pallet_name</code> (str): The name of the pallet.</li> <li><code>entry_name</code> (str): The name of the extrinsic.</li> <li><code>payload</code> (list): A list of arguments for the extrinsic.</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: The transaction hash as a hexadecimal string.</li> </ul> <p>Raises:</p> <ul> <li><code>RuntimeError</code>: If signing or submitting the transaction fails.</li> </ul> <p>Example:</p> <pre><code>import asyncio\nfrom subxtpy import SubxtClient, Keypair\n\nasync def main():\n    client = await SubxtClient.new()\n    keypair = Keypair.from_secret_key(\"your_64_character_hex_secret_key\")\n    tx_hash = await client.sign_and_submit(keypair, \"Balances\", \"transfer\", [dest_account_id, amount])\n    print(f\"Transaction Hash: {tx_hash}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"subxtclient/#subscribe_new_blocks-blocksubscription","title":"<code>subscribe_new_blocks() -&gt; BlockSubscription</code>","text":"<p>Subscribe to new blocks on the blockchain asynchronously.</p> <p>Returns:</p> <ul> <li><code>BlockSubscription</code>: An asynchronous iterator that yields blocks as they are finalized.</li> </ul> <p>Raises:</p> <ul> <li><code>RuntimeError</code>: If the subscription fails.</li> </ul> <p>Example:</p> <pre><code>import asyncio\nfrom subxtpy import SubxtClient\n\nasync def main():\n    client = await SubxtClient.new()\n    subscription = await client.subscribe_new_blocks()\n    async for block in subscription:\n        print(block)\n\nasyncio.run(main())\n</code></pre>"}]}